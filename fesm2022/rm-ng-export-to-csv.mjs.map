{"version":3,"file":"rm-ng-export-to-csv.mjs","sources":["../../../projects/rm-ng-export-to-csv/src/lib/rm-ng-export-to-csv.service.ts","../../../projects/rm-ng-export-to-csv/src/public-api.ts","../../../projects/rm-ng-export-to-csv/src/rm-ng-export-to-csv.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nexport interface CsvHeaderMapping {\r\n  label: string; // Header name in CSV\r\n  key: string;   // Key from JSON\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RmNgExportToCsvService {\r\n  exportAsCSV<T extends Record<string, any>>(\r\n    data: T[],\r\n    filename: string = 'export.csv',\r\n    headers?: CsvHeaderMapping[]\r\n  ): void {\r\n    if (!data || !data.length) return;\r\n\r\n    let keys: string[] = [];\r\n    let headerRow: string[] = [];\r\n\r\n    if (headers && headers.length) {\r\n      // Use custom headers\r\n      keys = headers.map((h) => h.key);\r\n      headerRow = headers.map((h) => h.label);\r\n    } else {\r\n      // Use keys from the first object\r\n      keys = Object.keys(data[0]);\r\n      headerRow = keys;\r\n    }\r\n\r\n    const csvRows = [];\r\n    csvRows.push(headerRow.join(','));\r\n\r\n    for (const row of data) {\r\n      const values = keys.map((key) => {\r\n        const cell = row[key] ?? '';\r\n        return `\"${cell.toString().replace(/\"/g, '\"\"')}\"`;\r\n      });\r\n      csvRows.push(values.join(','));\r\n    }\r\n\r\n    const csvContent = csvRows.join('\\r\\n');\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    const link = document.createElement('a');\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    link.setAttribute('href', url);\r\n    link.setAttribute('download', filename);\r\n    link.style.visibility = 'hidden';\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of rm-ng-export-to-csv\r\n */\r\n\r\nexport * from './lib/rm-ng-export-to-csv.service';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;MAUa,sBAAsB,CAAA;AACjC,IAAA,WAAW,CACT,IAAS,EACT,QAAmB,GAAA,YAAY,EAC/B,OAA4B,EAAA;AAE5B,QAAA,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM;YAAE,OAAO;QAElC,IAAI,IAAI,GAAa,EAAE,CAAC;QACxB,IAAI,SAAS,GAAa,EAAE,CAAC;AAE7B,QAAA,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,EAAE;;AAE7B,YAAA,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;AACjC,YAAA,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;SACzC;aAAM;;YAEL,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5B,SAAS,GAAG,IAAI,CAAC;SAClB;QAED,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AAElC,QAAA,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;YACtB,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAI;gBAC9B,MAAM,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;AAC5B,gBAAA,OAAO,CAAI,CAAA,EAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC;AACpD,aAAC,CAAC,CAAC;YACH,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SAChC;QAED,MAAM,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACxC,QAAA,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,EAAE,IAAI,EAAE,yBAAyB,EAAE,CAAC,CAAC;QACzE,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACzC,MAAM,GAAG,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AAEtC,QAAA,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AAC/B,QAAA,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;AACxC,QAAA,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC;AACjC,QAAA,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,KAAK,EAAE,CAAC;AACb,QAAA,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;KACjC;wGA3CU,sBAAsB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAtB,IAAA,OAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,sBAAsB,cAFrB,MAAM,EAAA,CAAA,CAAA;;4FAEP,sBAAsB,EAAA,UAAA,EAAA,CAAA;kBAHlC,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA,CAAA;;;ACTD;;AAEG;;ACFH;;AAEG;;;;"}